目的
  ・オブジェクト指向のイメージを掴む
  ・オブジェクトの特徴の理解

オブジェクト指向のイメージを掴む
  今回はオブジェクトがどのようなものかのイメージを掴むことを目的とする

オブジェクト指向とそうでない言語の違い
  ・手続き型言語
      ・コンピュータに実行させたい処理を基本的に上から順に記述
      ・コード量が増えた場合に可読性が下がる
      ・シンプルな仕組みのため、学習コストが低いがコード量が多くなると管理しきれなくなる

  ・オブジェクト指向言語
      ・オブジェクトと呼ばれるパーツを連携させることでアプリの機能を実現する
      ・複数の関数をまとめて1つのオブジェクトとして扱う

  ・手続き型言語とオブジェクト指向の違い
      ・手続き型言語は、例えるとなにかを行う時に一人で作業をし、一連のタスクをこなす場合に効率的にこなせる
      ・オブジェクト指向は、大きな作業を行う際に、グループ分けし役割を与え、チームで作業を行う場合に効率よくこなせる

オブジェクトの特徴を理解
      オブジェクト指向におけるオブジェクトについて抑える3点
          1.１つのオブジェクトには、１つの責務がある
          2.オブジェクトにはメソッドと変数が含まれる
          3.他にオブジェクトに公開するメソッドや変数は必要最低限のもののみとする

      1.１つのオブジェクトには、１つの責務がある
        ・単一責任の原則、１つのオブジェクトには１つの機能を持たせるように設計するのが良い
        ・フォームからの投稿機能の場合 
            1．データの入れ物となるもの
            2.フォームからデータを受け取るもの
            3.SQLを発行するもの
            4.上記のオブジェクトをコントロールするもの
            ・このように作成し、連携させることで機能を実現する

      2.オブジェクトにはメソッドと変数が含まれる
        ・オブジェクトは「メソッド」と「変数」をひとまとめにしたもの
        ・メソッドはオブジェクト内の変数の変更や参照をおこなう
        ・メソッドを例えるならチームのメンバーが作業を行うようなもの
        
      3.他にオブジェクトに公開するメソッドや変数は必要最低限のもののみとする
        ・あるメソッドが、別のオブジェクトの変数に直接アクセスしないように設計する
        ・別のオブジェクトに含まれる変数を取得したい場合は、相手方の「取得用のメソッド」に対してデータ取得を依頼する
        ・オブジェクト指向の特徴3点
            ・カプセル化-オブジェクトごとにメソッドや変数を分離して、他オブジェクトに必要以上に干渉しないようにする考え方
            ・継承-あるクラスの特性を別のクラスに引き継ぐことができる
            ・ポリモーフィズム-多様性、多用性とも呼ばれ、同じインターフェースやスーパークラスのメソッドを、複数の形や方法で実装でき、ことなる型のオブジェクトが同じインターフェースを共有でき、コードの柔軟性と再利用性が向上する
            これらの特徴により、効率的で整理された再利用可能なコードをかくことができる
