目的
  ・メソッドの理解

Rubyのメソッドとの違い
  ・役割はRubyとJavaで変わらない
  ・記述の方法は大きく変わる
  ・記述するにはクラスに関する知識が必要

mainメソッドの理解
  1.ファイルを実行するとmainメソッドが実行される
  2.mainメソッドの引数などは、必ず決められた通りに記述する必要がある

1. ファイルを実行するとmainメソッドが実行される
---------------------------------------------------
class Main {
  public static void main(String[] args){

{
--------------------------------------------------
  ・16行目の「main」はメソッド名を表し、mainメソッドの中身を定義している
  ・Rubyでは定義したメソッドは、実行する必要があるが、Javaのmainメソッドは、ファイルの実行時に自動的に実行される

2.mainメソッドの引数などは、必ず決められた通りに記述する必要がある
  mainメソッドの場合、データ型等を変更してしまうとエラーになるため、必ず下記のように記述する
-------------------------------------------------
 public static void main(String[] args){

{
-------------------------------------------------

基本的なメソッドの使い方
  ・メソッドの定義の構文は以下の通り
  アクセス修飾子 static修飾子　返り値にデータ型　メソッド名(){

  }
-------------------------------------------------
  public static void sayHello(){

  }
-------------------------------------------------
  ・上記の場合、voidが返り値のデータ型、sayHelloがメソッド名
  ・voidは返り値がない場合に記述される
  ・publicはこのメソッドが公開されており、どのクラスからもアクセス可能であることを意味する
  ・staticは、このメソッドが静的（クラスレベル）で有ることを意味する、特定のオブジェクトのインスタンスに属さず、クラス自体に属する
  ・メソッドを定義するために、返り値のデータ型を指定する必要があるのはRubyと異なる
Rubyとの違い
  ・返り値のデータ型を指定する必要がある
-----------------------------------------------
public static int returnNumber(){
  return 1;
}
-----------------------------------------------
    ・こちらのintは返り値のデータ型がint型（整数、小数点を含まない値を扱うためのデータ型）であることを示す
    ・return 1;のように、返り値が整数型であるなら、メソッドの名の前位に「int」と記述する
    ・返り値がない場合、「中身がない」という意味の「void」を使用する
  ・引数がないメソッドでも定義時にかっこの省略はできない
      ・Rubyの場合、返り値がない場合、（）を省略できたが、Javaの場合sayHello()のようにかっこが必要
  ・Rubyの「def」「end」の代わりに、波かっこでコードを囲む
      ・Rubyでは「def」や「end」を使用していたが、Javaは{}で囲む

アクセス修飾子とは
  ・外部への公開範囲を設定するためのもので、以下の3種類がある
      ・public       
          ・どのクラスからでもアクセスできる
          ・他のクラス、パッケージからのアクセスも可能
          ・最も制限の少ないアクセスレベル
      ・protected    
          ・同じクラス内、同じパッケージ内、またはサブクラスからアクセス可能
          ・サブクラスが異なるパッケージにある場合でもアクセスできる
          ・クラスを拡張する際に特に重要なアクセスレベル
      ・private 
          ・そのメンバーを含むクラス内からのみアクセス可能
          ・同じパッケージ内の他のクラスや、サブクラスからはアクセスできない 
          ・privateは最も制限の厳しいアクセスレベルで、クラス内部実装の詳細を隠蔽するのに役立つ

  ・これらのアクセス修飾子を適切に使用することで、クラスのカプセル化を強化し、安全で保守しやすいコードを書くことが可能
  ・なにも記述がない場合、「デフォルト」または「パッケージプライベート」アクセスが適用され、同じパッケージ内のクラスからのみアクセス可能
  ・Javaでは、publicにする必要がないものは極力privateを使用したほうが良い

static修飾子
  ・staticは静的という意味で、状態が変化しないことを意味する
  ・静的メソッドとして定義されたメソッドは、クラスメソッドとも呼ばれる
  ・Rubyのクラスメソッドと大体役割は同じ
  ・staticを付けない場合は、インスタンスメソッドとして定義される

メソッドの実行方法
  ・sayHelloの場合、sayHello();と記述することで呼び出すことができる。かっこは省略できない

メソッドの使い方の理解
 ------------------------------------------------- 
class Main {
  public static void main(String[] args) {
    var anser = square(5);
    System.out.println(answer);
  }

  public static int square(int number){
    return number * number;
  }
-------------------------------------------------
  ・92行目の(int number)に93行目のsquare(5)を受け取る仕組み
  ・(int number)は仮引数、square(5)は本引数、Rubyとは違いデータ型の指定が必要
  ・93行めのvar anser = square(5);でメソッドを実行して、引数を指定している。
