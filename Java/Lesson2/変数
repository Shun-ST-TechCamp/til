目的
  ・データ型の理解
  ・変数の理解

Rubyの変数との違い
  Ruby-「動的型付け言語」
      ・プログラムの実行時に変数のデータ型を決定する方式
    　・代入される際に、どのような値が代入されたかによって変数のデータ型が柔軟に変更され、処理が行われる
--------------------------------------------------------
      a = 1
      puts(a * 2)
      # 2と出力される

      a = "alphabet"
      puts(a * 2)
      # alphabetalphabetと出力される

      このような例では、aに数値（１）が代入されている場合は２と出力され、文字（"alphabet"）が代入されている場合文字列操作が行われ、alphabetalphabetと出力される
--------------------------------------------------------

      
  Java-「静的型付け言語」
      ・変数のデータ型を最初に決定したら変更できない仕組み
      ・最初に「整数」として宣言した変数に、「文字列」を代入しようとするとエラーになる
      ・処理が高速、データ型の不整合によるエラーを実行前に検知可能
      ・最初に「型の宣言」が必要になる

データ型の理解
  データ型とは
    ・変数に格納するデータの種類のこと
        Rubyでは数値としての１と文字としての１は別と扱われる。
    ・データ型は「数値」「文字」といった種類をより細かく決めたもので、Javaの基本データ型には８種類ある

  データ型の必要性
    ・コンピュータのリソースを効率よく使うため
    ・メモリを箱として考えると、大きなデータを保存することを考えて沢山の箱を用意しておきながら、小さなデータを入れてしまうと無駄が生じてしまうため、適切な箱の数を用意するためにデータ型が必要

  基本データ型の種類
    データ型| bit数 | 値
    -------|-------|------------------------------------------------------------
    boolean| 1bit  | trueあるいはfalse
    char   | 16bit | 文字
    byte   | 8bit  | 整数（扱える範囲は -127～127）
    short  | 16bit | 整数（扱える範囲は -32,768～32,767）
    int    | 32bit | 整数（扱える範囲は -2,147,483,648～2,147,483,647）
    long   | 64bit | 整数（扱える範囲は-9223372036854775808～9223372036854775807）
    float  | 32bit | 小数（精度低)
    double | 64bit | 小数（精度高）
    -------|-------|------------------------------------------------------------
    ・この中でよく使用するのは、int型とlong型
  
